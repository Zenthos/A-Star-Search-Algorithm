{"version":3,"sources":["AppStyles.ts","A-Star/Node.ts","A-Star/BinaryHeap.ts","A-Star/Graph.ts","App.tsx","index.tsx"],"names":["border_text","AppStyles","createUseStyles","root","width","height","background","container","display","canvas","border","left","padding","right","button","margin","color","backgroundColor","borderRadius","borderWidth","svgButton","cursor","transform","actionsContainer","flexDirection","graphActions","pageActions","marginBottom","headerContainer","justifyContent","minWidth","headers","fontSize","fontWeight","textDecoration","text","Node","x","y","key","wall","seen","parent","h","g","Infinity","f","this","point","BinaryHeap","option","list","favorSelection","heapify","smallestIndex","smallest","length","temp","node","find","n","push","i","Math","floor","size","nodeToRemove","findIndex","pop","delete","Graph","ctx","tileLength","initialAgent","initialTarget","agent","target","nodeList","algorithm","gValue","target_reachable","searched","moveList","path","nodes_expanded","search_duration","clearRect","row","fillStyle","fillRect","renderAgents","vector","start","setPosition","neighbors","getNeighbors","neighbor","closedList","filter","forEach","current","abs","newPosition","random","index","animated","backwardSearch","forwardSearch","console","log","a","reset","astar","reverse","start_time","Date","getTime","openList","insert","heuristic","currentNode","renderList","Promise","resolve","setTimeout","finalPath","map","renderPath","numberWithCommas","number","toString","split","whole","fraction","replace","App","classes","canvasRef","useRef","contextRef","useState","setIndex","graphList","setGraphList","setGValue","setAlgorithm","stats","setStats","currentStats","setCurrentStats","updateCurrentStats","useCallback","generateGraphSet","getContext","graphs","graph","init","randomInRange","useEffect","render","renderMoves","high","search","moveToTarget","loopCount","nextIndex","next","moveAgent","className","ref","onClick","alert","onChange","event","Number","value","_","summations","reduce","acc","curr","version","id","xmlns","viewBox","d","Fragment","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.072db42b.chunk.js","sourcesContent":["import { createUseStyles } from 'react-jss';\r\n\r\n// Dark Theme\r\nconst border_text = '#EDEDED';\r\nconst background = '#444444';\r\nconst canvas_bg = '#171717';\r\nconst button_default = '#DA0037';\r\nconst button_hover = '#BA0037';\r\n\r\n// Light Theme\r\n// const border_text = 'black';\r\n// const background = 'white';\r\n// const canvas_bg = 'white';\r\n// const button_default = 'black';\r\n// const button_hover = 'gray';\r\n\r\nexport const AppStyles = createUseStyles({\r\n  root: {\r\n    width: '100vw',\r\n    height: '100vh',\r\n    background: `${background}`\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    height: '98%',\r\n  },\r\n  canvas: {\r\n    border: `1px solid ${border_text}`,\r\n    background: canvas_bg\r\n  },\r\n  left: {\r\n    padding: '0.5rem'\r\n  },\r\n  right: {\r\n    padding: '0.5rem'\r\n  },\r\n  button: {\r\n    display: 'block',\r\n    margin: '8px 0px',\r\n    padding: '0.5rem',\r\n    color: 'white',\r\n    backgroundColor: button_default,\r\n    borderRadius: 8,\r\n    borderWidth: 0,\r\n    width: '250px',\r\n    '&:hover': {\r\n      backgroundColor: button_hover,\r\n    },\r\n  },\r\n  svgButton: {\r\n    margin: 0,\r\n    padding: 0,\r\n    border: 0,\r\n    background: 'transparent',\r\n    height: '24px',\r\n    cursor: 'pointer',\r\n    '&:active': {\r\n      transform: 'rotate(90deg)',\r\n      '-webkit-transform': 'rotate(90deg)',\r\n      '-ms-transform': 'rotate(90deg)',\r\n    }\r\n  },\r\n  actionsContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%'\r\n  },\r\n  graphActions: {\r\n    border: `1px solid ${border_text}`,\r\n    padding: '1rem',\r\n    height: '50%',\r\n  },\r\n  pageActions: {\r\n    border: `1px solid ${border_text}`,\r\n    marginBottom: '1rem',\r\n    padding: '1rem',\r\n    height: '50%'\r\n  },\r\n  headerContainer: {\r\n    display: 'flex',\r\n    width: '100%',\r\n    justifyContent: 'space-between',\r\n    minWidth: '250px',\r\n  },\r\n  headers: {\r\n    fontSize: 20,\r\n    fontWeight: 600,\r\n    display: 'block',\r\n    color: border_text,\r\n    textDecoration: 'underline',\r\n    margin: '0px 0px 16px 0px',\r\n  },\r\n  text: {\r\n    color: border_text,\r\n  }\r\n});","export interface Vector {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport class Node {\r\n  key: string;\r\n  wall: boolean;\r\n  seen: boolean;\r\n  parent: Node | null;\r\n\r\n  x: number = 0;\r\n  y: number = 0;\r\n\r\n  h: number = 0;\r\n  g: number = Infinity;\r\n  f: number = Infinity;\r\n\r\n  constructor(x: number, y: number) {\r\n    this.wall = false;\r\n    this.seen = false;\r\n    this.parent = null;\r\n    this.key = `${x},${y}`;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  setPosition(point: Vector) {\r\n    this.x = point.x;\r\n    this.y = point.y;\r\n    this.key = `${point.x},${point.y}`;\r\n  }\r\n}","import { Node } from './Node';\r\n\r\nexport class BinaryHeap {\r\n  list: Node[];\r\n  favorSelection: string;\r\n\r\n  constructor(option: string) {\r\n    this.list = [];\r\n    this.favorSelection = option;\r\n  }\r\n\r\n  heapify = (smallestIndex: number) => {\r\n    let smallest = smallestIndex;\r\n    const left = 2 * smallestIndex + 1;\r\n    const right = 2 * smallestIndex + 2;\r\n\r\n    if (left < this.list.length && this.list[left].f <= this.list[smallest].f) {\r\n      if (this.favorSelection === 'greater' && this.list[left].g >= this.list[smallest].g)\r\n        smallest = left;\r\n\r\n      if (this.favorSelection === 'smaller' && this.list[left].g <= this.list[smallest].g)\r\n        smallest = left;\r\n\r\n      if (this.favorSelection === 'none')\r\n        smallest = left;\r\n    }\r\n\r\n    if (right < this.list.length && this.list[right].f <= this.list[smallest].f) {\r\n      if (this.favorSelection === 'greater' && this.list[right].g >= this.list[smallest].g)\r\n        smallest = right;\r\n\r\n      if (this.favorSelection === 'smaller' && this.list[right].g <= this.list[smallest].g)\r\n        smallest = right;\r\n\r\n      if (this.favorSelection === 'none')\r\n        smallest = right;\r\n    }\r\n\r\n    if (smallest !== smallestIndex) {\r\n      const temp = this.list[smallestIndex];\r\n      this.list[smallestIndex] = this.list[smallest];\r\n      this.list[smallest] = temp;\r\n\r\n      // Recursively heapify the child trees\r\n      this.heapify(smallest);\r\n    }\r\n  }\r\n\r\n  insert(node: Node) {\r\n    const size = this.list.length;\r\n\r\n    if (size === 0) {\r\n      this.list.push(node);\r\n      return;\r\n    }\r\n\r\n    if (this.list.find((n) => n.key === node.key)) return;\r\n\r\n    this.list.push(node);\r\n    for (let i = Math.floor(this.list.length/2 - 1); i >= 0; i--) {\r\n      this.heapify(i);\r\n    }\r\n  }\r\n\r\n  delete(node: Node) {\r\n    const size = this.list.length;\r\n    const nodeToRemove = this.list.findIndex((n) => n.key === node.key);\r\n\r\n    // Swap the node with last element\r\n    const temp = this.list[size - 1];\r\n    this.list[size - 1] = this.list[nodeToRemove];\r\n    this.list[nodeToRemove] = temp;\r\n\r\n    // Remove the last element\r\n    this.list.pop();\r\n    \r\n    for (let i = Math.floor(this.list.length/2 - 1); i >= 0; i--) {\r\n      this.heapify(i);\r\n    }\r\n  }\r\n\r\n  getMin() {\r\n    return this.list[0];\r\n  }\r\n\r\n  has(node: Node) {\r\n    const exists = this.list.find((n) => n.key === node.key);\r\n\r\n    return exists ? true : false;\r\n  }\r\n\r\n  pop() {\r\n    const smallest = this.list[0];\r\n    this.delete(smallest);\r\n    return smallest;\r\n  }\r\n\r\n  length() {\r\n    return this.list.length;\r\n  }\r\n\r\n  getList() {\r\n    return this.list;\r\n  }\r\n}","import { Vector, Node } from './Node';\r\nimport { BinaryHeap } from './BinaryHeap';\r\n// REFERENCE https://briangrinstead.com/blog/astar-search-algorithm-in-javascript/\r\n// REFERENCE https://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\r\n\r\nexport class Graph {\r\n  ctx: CanvasRenderingContext2D;\r\n  tileLength: number;\r\n\r\n  initialAgent: Vector = { x: 0, y: 0};\r\n  initialTarget: Vector = { x: 0, y: 0 };\r\n  agent: Node = new Node(0, 0);\r\n  target: Node = new Node(0, 0);\r\n  nodeList: Array<Node[]> = [];\r\n\r\n  // Options\r\n  algorithm: string = 'forward';\r\n  gValue: string = 'none';\r\n\r\n  // Result\r\n  target_reachable: boolean = true;\r\n  searched: boolean = false;\r\n  moveList: Vector[] = [];\r\n  path: Vector[] = [];\r\n\r\n  // Statistics\r\n  nodes_expanded: number = 0;\r\n  search_duration: number = 0;\r\n\r\n  constructor(ctx: CanvasRenderingContext2D, tileLength: number) {\r\n    this.ctx = ctx;\r\n    this.tileLength = tileLength;\r\n  }\r\n\r\n  render() {\r\n    // Clear Canvas on Every Render\r\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n\r\n    // Render Walls\r\n    for (const row of this.nodeList) {\r\n      for (const node of row) {\r\n        if (node.wall) {\r\n          this.ctx.fillStyle = 'white';\r\n          this.ctx.fillRect(node.x * this.tileLength, node.y * this.tileLength, this.tileLength, this.tileLength);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.renderAgents();\r\n  }\r\n\r\n  renderMoves() {\r\n    for (const vector of this.moveList) {\r\n      this.ctx.fillStyle = 'purple';\r\n      this.ctx.fillRect(vector.x * this.tileLength, vector.y * this.tileLength, this.tileLength, this.tileLength);\r\n    }\r\n\r\n    this.renderAgents();\r\n  }\r\n\r\n  renderPath() {\r\n    for (const vector of this.path) {\r\n      this.ctx.fillStyle = 'blue';\r\n      this.ctx.fillRect(vector.x * this.tileLength, vector.y * this.tileLength, this.tileLength, this.tileLength);\r\n    }\r\n\r\n    this.renderAgents();\r\n  }\r\n\r\n  renderList(list: Node[]) {\r\n    for (const node of list) {\r\n      this.ctx.fillStyle = 'orange';\r\n      this.ctx.fillRect(node.x * this.tileLength, node.y * this.tileLength, this.tileLength, this.tileLength);\r\n\r\n      this.renderAgents();\r\n    }\r\n  }\r\n\r\n  renderAgents() {\r\n    // Render Agent\r\n    this.ctx.fillStyle = 'green';\r\n    this.ctx.fillRect(this.agent.x * this.tileLength, this.agent.y * this.tileLength, this.tileLength, this.tileLength);\r\n\r\n    // Render Target\r\n    this.ctx.fillStyle = 'red';\r\n    this.ctx.fillRect(this.target.x * this.tileLength, this.target.y * this.tileLength, this.tileLength, this.tileLength);\r\n  }\r\n\r\n  setGValue(option: string) {\r\n    this.gValue = option;\r\n  }\r\n\r\n  setAlgorithm(option: string) {\r\n    this.algorithm = option;\r\n  }\r\n\r\n  init(start: Vector, target: Vector) {\r\n    // Adding vertices\r\n    for (let y = 0; y < this.ctx.canvas.width/this.tileLength; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < this.ctx.canvas.height/this.tileLength; x++) {\r\n        if (start.y === y && start.x === x) {\r\n          this.agent.setPosition(start);\r\n          this.agent.seen = true;\r\n          this.initialAgent = start;\r\n          row.push(this.agent);\r\n          continue;\r\n        }\r\n\r\n        if (target.y === y && target.x === x) {\r\n          this.target.setPosition(target);\r\n          this.initialTarget = target;\r\n          row.push(this.target);\r\n          continue;\r\n        }\r\n\r\n        row.push(new Node(x, y));\r\n      }\r\n      this.nodeList.push(row);\r\n    }\r\n\r\n    const neighbors = this.getNeighbors(this.agent, []);\r\n    for (const neighbor of neighbors) {\r\n      neighbor.seen = true;\r\n      neighbor.wall = false;\r\n    }\r\n  }\r\n\r\n  getNeighbors(node: Node, closedList: Node[]): Node[] {\r\n    const neighbors = [];\r\n\r\n    if (node.x - 1 >= 0) neighbors.push(this.nodeList[node.y][node.x - 1]);\r\n    if (node.x + 1 <= (this.ctx.canvas.width/this.tileLength) - 1) neighbors.push(this.nodeList[node.y][node.x + 1]);\r\n\r\n    if (node.y - 1 >= 0) neighbors.push(this.nodeList[node.y - 1][node.x]);\r\n    if (node.y + 1 <= (this.ctx.canvas.width/this.tileLength) - 1) neighbors.push(this.nodeList[node.y + 1][node.x]);\r\n\r\n    return neighbors.filter((neighbor) => !closedList.find((n) => n.key === neighbor.key));\r\n  }\r\n\r\n  reset() {\r\n    this.searched = false;\r\n    this.nodeList.forEach((row) => {\r\n      for (const node of row) {      \r\n        node.h = 0;\r\n        node.g = Infinity;\r\n        node.f = Infinity;\r\n        node.parent = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  heuristic(current: Node, target: Node) {\r\n    // Manhattan Distance\r\n    const dx1 = Math.abs(current.x - target.x);\r\n    const dy1 = Math.abs(current.y - target.y)\r\n\r\n    // const dx2 = start.x - target.x;\r\n    // const dy2 = start.y - target.y;\r\n    // const cross = Math.abs(dx1 * dy2 - dx2 * dy1);\r\n\r\n    return (dx1 + dy1);\r\n  }\r\n\r\n  moveAgent(newPosition: Vector) {\r\n    this.agent = this.nodeList[newPosition.y][newPosition.x];\r\n    this.moveList.push(newPosition);\r\n\r\n    const neighbors = this.getNeighbors(this.agent, []);\r\n\r\n    for (const neighbor of neighbors) {\r\n      if (neighbor.seen) continue;\r\n      neighbor.seen = true;\r\n\r\n      if (neighbor.x === this.agent.x && neighbor.y === this.agent.y) continue;\r\n      if (neighbor.x === this.target.x && neighbor.y === this.target.y) continue;\r\n\r\n      neighbor.wall = Math.random() > 0.70;\r\n    }\r\n  }\r\n\r\n  search(index: number, animated?: boolean) {\r\n    switch (this.algorithm) {\r\n      case 'adaptive-backward':\r\n      case 'backward':\r\n        this.backwardSearch(index, animated);\r\n        break;\r\n      case 'adaptive-forward':\r\n      case 'forward':\r\n        this.forwardSearch(index, animated);\r\n        break;\r\n      default:\r\n        console.log(\"invalid algo\");\r\n    }\r\n  }\r\n\r\n  async backwardSearch(index: number, animated?: boolean) {\r\n    if (this.searched) this.reset();\r\n    console.log(`searching ${index}`);\r\n\r\n    const start = this.target;\r\n    const target = this.agent;\r\n\r\n    if (!start || !target) return;\r\n\r\n    this.astar(start, target, animated);\r\n  }\r\n  \r\n  async forwardSearch(index: number, animated?: boolean) {\r\n    if (this.searched) this.reset();\r\n    console.log(`searching ${index}`);\r\n    \r\n    const start = this.agent;\r\n    const target = this.target;\r\n      \r\n    if (!start || !target) return;\r\n\r\n    this.astar(start, target, animated);\r\n    this.path = this.path.reverse();\r\n  }\r\n\r\n  /**\r\n   * Actual A* Algorithm Implementation\r\n   */\r\n  async astar(start: Node, target: Node, animated?: boolean) {\r\n    const start_time = new Date().getTime();\r\n    const openList = new BinaryHeap(this.gValue);\r\n    const closedList: Node[] = [];\r\n    const path: Node[] = [];\r\n\r\n    if (this.algorithm !== 'adaptive') {\r\n      for (const row of this.nodeList) {\r\n        for (const node of row) {\r\n          node.h = 0;\r\n          node.g = Infinity;\r\n          node.f = Infinity;\r\n        }\r\n      }\r\n    }\r\n\r\n    openList.insert(start);\r\n    start.parent = null;\r\n    start.g = 0;\r\n    start.h = this.heuristic(start, target);\r\n    start.f = start.g + start.h;\r\n    \r\n    while (true) {\r\n      // Open list contains lowest f node at the top\r\n      const currentNode = openList.pop();\r\n      \r\n      if (!currentNode) {\r\n        console.log('target unreachable');\r\n        this.target_reachable = false;\r\n        this.path = [];\r\n        return;\r\n      }\r\n      \r\n      // Neighbors are only the nodes above, below, left, right\r\n      const neighbors = this.getNeighbors(currentNode, closedList);\r\n      for (const neighbor of neighbors) {\r\n        if (neighbor.wall) continue;\r\n        \r\n        if (!closedList.find((n) => n.key === currentNode.key)) {\r\n          // Node has not been explored yet\r\n          openList.insert(neighbor);\r\n          \r\n          neighbor.h = this.heuristic(neighbor, target);\r\n          neighbor.g = this.heuristic(neighbor, start);\r\n          neighbor.f = neighbor.g + neighbor.h;\r\n          neighbor.parent = currentNode;\r\n        }\r\n      }\r\n      \r\n      closedList.push(currentNode);\r\n      \r\n      if (currentNode.key === target.key) {\r\n        let current: Node = currentNode;\r\n\r\n        while (current?.key !== start.key) {\r\n          path.push(current);\r\n          current = current.parent!;\r\n        }\r\n\r\n        path.push(start)\r\n        break;\r\n      }\r\n      \r\n      if (animated) {\r\n        this.renderList([...openList.list, ...closedList]);\r\n        await new Promise((resolve) => setTimeout(resolve, 5));\r\n      }\r\n    }\r\n\r\n    const finalPath = path.map((node) => ({ x: node.x, y: node.y } as Vector));\r\n    this.search_duration = this.search_duration + new Date().getTime() - start_time;\r\n    this.nodes_expanded = this.nodes_expanded + closedList.length + openList.length();\r\n    this.searched = true;\r\n    this.path = finalPath;\r\n    if (animated) this.renderPath();\r\n  }\r\n}","import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport { AppStyles } from './AppStyles';\nimport { Graph } from './A-Star';\nimport './App.css';\n\nexport function numberWithCommas(number: number | string): string {\n  const [whole, fraction] = number.toString().split('.');\n\n  if (fraction) return (`${whole.replace(/(.)(?=(\\d{3})+$)/g, '$1,') }.${fraction}`);\n\n  return (`${whole.replace(/(.)(?=(\\d{3})+$)/g, '$1,') }`);\n}\n\n\nfunction App() {\n  const classes = AppStyles();\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const contextRef = useRef<CanvasRenderingContext2D | null>(null);\n  const tileLength = 15;\n\n  const [index, setIndex] = useState<number>(0);\n  const [graphList, setGraphList] = useState<Graph[]>([]);\n\n  const [gValue, setGValue] = useState('greater');\n  const [algorithm, setAlgorithm] = useState('forward');\n\n  const [stats, setStats] = useState<any>();\n  const [currentStats, setCurrentStats] = useState<any>();\n  \n  const updateCurrentStats = useCallback(() => {\n    setCurrentStats({\n      nodes_expanded: graphList[index].nodes_expanded,\n      search_duration: graphList[index].search_duration,\n      target_reachable: graphList[index].target_reachable\n    });\n  }, [graphList, index]);\n\n  \n  const generateGraphSet = useCallback(() => {\n    if (!canvasRef.current) return;\n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    const graphs = [];\n    \n    for (let i = 0; i < 50; i++) {\n      const graph = new Graph(ctx, tileLength);\n      graph.init(\n        { x: randomInRange(), y: randomInRange() },\n        { x: randomInRange(), y: randomInRange() }\n      );\n      graph.setAlgorithm(algorithm);\n      graph.setGValue(gValue);\n      graphs.push(graph);\n    }\n\n    setGraphList(graphs);\n    setIndex(0);\n  }, [algorithm, gValue]);\n\n  useEffect(() => {\n    if (graphList.length <= 0) return;\n\n    graphList[index].render();\n    graphList[index].renderMoves();\n    updateCurrentStats();\n  }, [index, graphList, updateCurrentStats]);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const ctx = canvasRef.current.getContext('2d');\n    \n    if (!ctx) return;\n    contextRef.current = ctx;\n\n    generateGraphSet();\n  }, [generateGraphSet]);\n\n  const updateAllStats = () => {\n    const summations = graphList.reduce((acc, curr) => {\n      return {\n        nodes_expanded: acc.nodes_expanded + curr.nodes_expanded,\n        search_duration: acc.search_duration + curr.search_duration,\n        target_reachable: acc.target_reachable + (curr.target_reachable && curr.searched ? 1 : 0)\n      }\n    }, {\n      nodes_expanded: 0,\n      search_duration: 0,\n      target_reachable: 0\n    } as any);\n\n    setStats(summations);\n  }\n\n  const randomInRange = () => {\n    if (!canvasRef.current) return 0;\n    const canvas = canvasRef.current;\n    \n    const low = 0;\n    const high = canvas.width / tileLength;\n    return Math.floor(Math.random() * (1 + high - low)) + low;\n  }\n\n  const generateNewGraph = () => {\n    if (!contextRef.current) return;\n    const ctx = contextRef.current;\n    if (graphList.length <= 0) return;\n\n    const graph = new Graph(ctx, tileLength);\n    graph.init(\n      { x: randomInRange(), y: randomInRange() },\n      { x: randomInRange(), y: randomInRange() }\n    );\n\n    graphList[index] = graph;\n    graph.render();\n  }\n\n  const resetGraph = () => {\n    graphList[index].agent = graphList[index].nodeList[graphList[index].initialAgent.y][graphList[index].initialAgent.x];\n    graphList[index].target = graphList[index].nodeList[graphList[index].initialTarget.y][graphList[index].initialTarget.x];\n\n    graphList[index].reset();\n    graphList[index].render();\n\n    graphList[index].nodes_expanded = 0;\n    graphList[index].search_duration = 0;\n  }\n\n  const executeAll = () => {\n    for (let i = 0; i < graphList.length; i++) {\n      moveToTarget(graphList[i], i);\n    }\n\n    graphList[index].render();\n    graphList[index].renderMoves();\n    alert('All graphs finished pathfinding');\n  }\n  \n  const search = async () => {\n    graphList[index].setAlgorithm(algorithm);\n    graphList[index].setGValue(gValue);\n    graphList[index].search(index, true);\n  }\n\n  const moveToTarget = async (graph: Graph, index: number, animated?: boolean) => {\n    graph.setAlgorithm(algorithm);\n    graph.setGValue(gValue);\n    graph.search(index);\n\n    let loopCount = 0;\n    let nextIndex = 0;\n    while (graph.agent.key !== graph.target.key) {\n      if (graph.path.length === 0) return;\n      if (!graph.target_reachable) return;\n      if (loopCount > 1000) {\n        graph.target_reachable = false;\n        return;\n      }\n\n      const next = graph.path[nextIndex];\n\n      if ((!next?.y && !next?.x) || graph.nodeList[next.y][next.x].wall) {\n        graph.search(index);\n        nextIndex = 0;\n      } else {\n        graph.moveAgent(next);\n        nextIndex++;\n      }\n\n      loopCount++;\n      graph.render();\n      graph.renderAgents();\n      if (animated) await new Promise((resolve) => setTimeout(resolve, 20));\n    }\n\n    graphList[index].renderMoves();\n  }\n\n  const onGraphSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const i = Number(event.target.value);\n\n    setIndex(i);\n  }\n\n  const onGSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setGValue(event.target.value)\n\n    graphList.forEach((graph) => {\n      graph.setGValue(event.target.value);\n    });\n  }\n\n  const onAlgoSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setAlgorithm(event.target.value)\n\n    graphList.forEach((graph) => {\n      graph.setAlgorithm(event.target.value);\n    });\n  }\n\n  return (\n    <div className={classes.root}>\n      <main className={classes.container}>\n        <div className={classes.left}>\n          <canvas className={classes.canvas} ref={canvasRef} width={720} height={720} />\n        </div>\n        <div className={classes.right}>\n          <div className={classes.container}>\n            <div className={classes.left}>\n              <div className={classes.actionsContainer}>\n                <div className={classes.pageActions}>\n                  <div className={classes.headerContainer}>\n                    <p className={classes.headers}>Actions</p>\n                  </div>\n                  <button className={classes.button} onClick={generateGraphSet}>Generate New Set</button>\n                  <button className={classes.button} onClick={executeAll}>Execute All Graphs</button>\n                  <select onChange={onGraphSelect} value={index} className={classes.button}>\n                    {graphList.map((_, index) => (\n                      <option key={`graph-${index}`} value={index}>Graph {index + 1}</option>\n                    ))}\n                  </select>\n                  <select onChange={onGSelect} value={gValue} className={classes.button}>\n                    <option value=\"none\">No G-Value Preference</option>\n                    <option value=\"smaller\">Prefer Smaller G-Values</option>\n                    <option value=\"greater\">Prefer Greater G-Values</option>\n                  </select>\n                  <select onChange={onAlgoSelect} value={algorithm} className={classes.button}>\n                    <option value=\"forward\">Repeating Forward A*</option>\n                    <option value=\"backward\">Repeating Backward A*</option>\n                    <option value=\"adaptive-forward\">Adaptive Forward A*</option>\n                    <option value=\"adaptive-backward\">Adaptive Backward A*</option>\n                  </select>\n                </div>\n                <div className={classes.graphActions}>\n                  <div className={classes.headerContainer}>\n                    <p className={classes.headers}>Selected Graph Actions</p>\n                  </div>\n                  <button className={classes.button} onClick={() => moveToTarget(graphList[index], index, true)}>Play</button>\n                  <button className={classes.button} onClick={search}>Search</button>\n                  <button className={classes.button} onClick={resetGraph}>Reset</button>\n                  <button className={classes.button} onClick={generateNewGraph}>Regenerate</button>\n                </div>\n              </div>\n            </div>\n            <div className={classes.right}>\n              <div className={classes.actionsContainer}>\n                <div className={classes.pageActions}>\n                  <div className={classes.headerContainer}>\n                    <p className={classes.headers}>Statistics of All Graphs</p>\n                    <button className={classes.svgButton} onClick={updateAllStats}>\n                      <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\" viewBox=\"0 0 512 512\">\n                        <g>\n                          <path d=\"M479.971,32.18c-21.72,21.211-42.89,43-64.52,64.301c-1.05,1.23-2.26-0.16-3.09-0.85   c-24.511-23.98-54.58-42.281-87.221-52.84c-37.6-12.16-78.449-14.07-117.029-5.59c-68.67,14.67-128.811,64.059-156.44,128.609   c0.031,0.014,0.062,0.025,0.093,0.039c-2.3,4.537-3.605,9.666-3.605,15.1c0,18.475,14.977,33.451,33.451,33.451   c15.831,0,29.084-11.002,32.555-25.773c19.757-41.979,58.832-74.445,103.967-85.527c52.2-13.17,111.37,1.33,149.4,40.041   c-22.03,21.83-44.391,43.34-66.33,65.26c59.52-0.32,119.06-0.141,178.59-0.09C480.291,149.611,479.931,90.891,479.971,32.18z\"/>\n                          <path d=\"M431.609,297.5c-14.62,0-27.041,9.383-31.591,22.453c-0.009-0.004-0.019-0.008-0.027-0.012   c-19.11,42.59-57.57,76.219-102.84,88.18c-52.799,14.311-113.45,0.299-152.179-39.051c21.92-21.76,44.369-43.01,66.189-64.869   c-59.7,0.049-119.41,0.029-179.11,0.01c-0.14,58.6-0.159,117.189,0.011,175.789c21.92-21.91,43.75-43.91,65.79-65.699   c14.109,13.789,29.76,26.07,46.92,35.869c54.739,31.971,123.399,38.602,183.299,17.891   c57.477-19.297,106.073-63.178,131.212-118.318c3.645-5.357,5.776-11.824,5.776-18.793C465.06,312.477,450.083,297.5,431.609,297.5   z\"/>\n                        </g>\n                      </svg>\n                    </button>\n                  </div>\n                  {graphList.length > 0 ? (\n                    <React.Fragment>\n                      <p className={classes.text}>\n                        Nodes Expanded: {numberWithCommas(stats?.nodes_expanded|| 0)}\n                      </p>    \n                      <p className={classes.text}>\n                        Search Duration: {numberWithCommas(stats?.search_duration || 0)}ms\n                      </p>     \n                      <p className={classes.text}>\n                        Reachable Graphs: {stats?.target_reachable || 0}/50\n                      </p>            \n                    </React.Fragment>\n                  ) : (    \n                    <p className={classes.text}>Nothing to display yet</p>\n                  )}\n                </div>\n                <div className={classes.graphActions}>\n                  <div className={classes.headerContainer}>\n                    <p className={classes.headers}>Selected Graph Stats</p>\n                    <button className={classes.svgButton} onClick={updateCurrentStats}>\n                      <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"24px\" height=\"24px\" viewBox=\"0 0 512 512\">\n                        <g>\n                          <path d=\"M479.971,32.18c-21.72,21.211-42.89,43-64.52,64.301c-1.05,1.23-2.26-0.16-3.09-0.85   c-24.511-23.98-54.58-42.281-87.221-52.84c-37.6-12.16-78.449-14.07-117.029-5.59c-68.67,14.67-128.811,64.059-156.44,128.609   c0.031,0.014,0.062,0.025,0.093,0.039c-2.3,4.537-3.605,9.666-3.605,15.1c0,18.475,14.977,33.451,33.451,33.451   c15.831,0,29.084-11.002,32.555-25.773c19.757-41.979,58.832-74.445,103.967-85.527c52.2-13.17,111.37,1.33,149.4,40.041   c-22.03,21.83-44.391,43.34-66.33,65.26c59.52-0.32,119.06-0.141,178.59-0.09C480.291,149.611,479.931,90.891,479.971,32.18z\"/>\n                          <path d=\"M431.609,297.5c-14.62,0-27.041,9.383-31.591,22.453c-0.009-0.004-0.019-0.008-0.027-0.012   c-19.11,42.59-57.57,76.219-102.84,88.18c-52.799,14.311-113.45,0.299-152.179-39.051c21.92-21.76,44.369-43.01,66.189-64.869   c-59.7,0.049-119.41,0.029-179.11,0.01c-0.14,58.6-0.159,117.189,0.011,175.789c21.92-21.91,43.75-43.91,65.79-65.699   c14.109,13.789,29.76,26.07,46.92,35.869c54.739,31.971,123.399,38.602,183.299,17.891   c57.477-19.297,106.073-63.178,131.212-118.318c3.645-5.357,5.776-11.824,5.776-18.793C465.06,312.477,450.083,297.5,431.609,297.5   z\"/>\n                        </g>\n                      </svg>\n                    </button>\n                  </div>\n                  {graphList.length > 0 ? (\n                    <React.Fragment>\n                      <p className={classes.text}>\n                        Nodes Expanded: {numberWithCommas(currentStats?.nodes_expanded || 0)}\n                      </p>    \n                      <p className={classes.text}>\n                        Search Duration: {numberWithCommas(currentStats?.search_duration || 0)}ms\n                      </p>                \n                      <p className={classes.text}>\n                        Target Reachable: {`${currentStats?.target_reachable}` || 0}\n                      </p>         \n                    </React.Fragment>\n                  ) : (    \n                    <p className={classes.text}>Nothing to display yet</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}